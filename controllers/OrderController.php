<?php
namespace app\controllers;

use app\helpers\AuthHelper;
use app\helpers\UtilityHelper;
use app\models\Forms\UpsellForm;
use app\models\Orders;
use app\models\OrderStepOne;
use Yii;
use yii\web\Controller;
use yii\web\Response;
use yii\widgets\ActiveForm;

class OrderController extends Controller
{
  /**
   * Return view of Order
   *
   * @return string
   */
  public function beforeAction($action) {

    Yii::$app->session->open();

    return parent::beforeAction($action); // TODO: Change the autogenerated stub
  }
  
  public function actionIndex()
  {
    return $this->render('index', []);
  }
  /**
   * Return view of Upsell
   *
   * @return string
   */
  public function actionUpsell()
  {
    $model = new UpsellForm();

    // validate any AJAX requests fired off by the form
    if (Yii::$app->request->isAjax && $model->load(Yii::$app->request->post())) {
      Yii::$app->response->format = Response::FORMAT_JSON;
      return ActiveForm::validate($model);
    }

    return $this->render('upsell', ['model' => $model]);
  }
  /**
   * Return view of Thank You
   *
   * @return string
   */
  public function actionThankyou()
  {
    return $this->render('thankyou', []);
  }
  public function actionStepOne()
  {
    $model = new OrderStepOne();

    $order_form = Yii::$app->request->post();
    $r['OrderStepOne'] = $order_form['OrderForm'];
    //$r['OrderStepOne'] = Yii::$app->request->post();

    if ($model->load($r) && $model->save()) {
        if(OrderStepOne::findOne(['email' => trim($model->email)])){
            return "Already Saved";
        }

        $model->ip_address = UtilityHelper::getClientIp();
        date_default_timezone_set('America/New_York');
        $model->date_created = date("Y-m-d H:i:s");
        $model->save();
        return "200";
    }else{
        //var_dump($model->errors);
        return "Error on Save";
    }
  }
  public function actionMakeOrder()
  {  
    //return Yii::$app->response->content = "We're not able to process your order right now.";
    $model = new \app\models\Forms\OrderForm();

    $_REQUEST['OrderForm']['cardNumber'] = isset($_REQUEST['OrderForm']['cardNumber']) ? str_replace('-','', $_REQUEST['OrderForm']['cardNumber']) : FALSE;

    if ($model->load($_REQUEST) && $model->validate()) {
      $product = UtilityHelper::getCustomParameters($_REQUEST['product_id']);
      $model->productId = ($model->payment_processor == 'credit_card') ? $product['cc'] : $product['pp'];
      
      $products[] = [
        'id'     =>  $model->productId,
        'name'   =>  $product['name'],
        'amount' =>  $product['amount'],
      ];

      if (isset($_REQUEST['OrderForm']['shippingCountry'])) {
        $country = strtoupper($_REQUEST['OrderForm']['shippingCountry']);
        $shippingInfo = UtilityHelper::getCustomParameters('shipping_info');
        $shippingInfo = $shippingInfo[$country][($country == 'US') ? 'free' : 'standard'];
      }

      $_REQUEST['OrderForm']['billingSameAsShipping'] = 'YES';
      $_REQUEST['OrderForm']['promo_code'] = isset($_SESSION['cart_promo_code']) ? $_SESSION['cart_promo_code'] : FALSE;

      $init_order_id = Orders::createOrder($_REQUEST['OrderForm'], $products, $shippingInfo['id'], $shippingInfo['amount']);
                  
      if ($model->payment_processor == 'credit_card') {
        AuthHelper::doPayment($init_order_id);
      }

      $order = Orders::findOne($init_order_id);

      if ($model->payment_processor == 'paypal' && isset($_REQUEST['pp_subscription_id'])) {              
        $_SESSION['previous_order'] = [];
        $_SESSION['previous_order']['id'] = $order->id;
        $_SESSION['previous_order']['payment_processor'] = $order->payment_processor;
        $order->pp_subscription_id = $_REQUEST['pp_subscription_id'];
        if(isset($_REQUEST['product_id'])){
            $_SESSION['previous_order']['pro_id'] = $_REQUEST['product_id'];
        }
        $order->save();
        return;
      }

      if ($order) {
        if ($order->status == Orders::STATUS_CONFIRMED) {
          $_SESSION['previous_order'] = [];
          $_SESSION['previous_order']['id'] = $order->id;
          $_SESSION['previous_order']['payment_processor'] = $order->payment_processor;
          if(isset($_REQUEST['product_id'])){
              $_SESSION['previous_order']['pro_id'] = $_REQUEST['product_id'];
          }
          //$upsell_page = '/upsell';

          $return = ['status' => '100', 'redirect_to' => '/order/upsell'];

          return Yii::$app->response->content = json_encode($return);
        } else {
          //$model->addError('OrderError', $order->errorMessage);
          return Yii::$app->response->content = $order->errorMessage;
        }
      }
    } else {
      
      $errors = '';
      foreach ($model->errors as $field => $error) {
        $errors .= $model->getAttributeLabel($field) . ': ' . $error[0] . '<br>';
      }
      return Yii::$app->response->content = $errors;
    }
  }
  // Paypal Functions
  public function actionPpConfirm($id)
  {
    $order = Orders::find()->where(['pp_subscription_id' => $id])->orderBy("id DESC")->one();
    if ($order) {
      $order->status = Orders::STATUS_CONFIRMED;
      $order->save();
    }
  }
  public function actionPpCancel($id)
  {
    $order = Orders::find()->where(['pp_subscription_id' => $id])->orderBy("id DESC")->one();
    if ($order) {
      $order->status = Orders::STATUS_CANCELED;

      $order->save();
      return Yii::$app->response->content = 'Order is Canceled';
    }else{
      return Yii::$app->response->content = 'Order not Found';
    }
  }
  public function actionPpError()
  {
    if (isset($_REQUEST['error']) && isset($_REQUEST['id'])) {
      $order = Orders::find()->where(['pp_subscription_id' => $_REQUEST['id']])->orderBy("id DESC")->one();
      if ($order) {
        $order->errorMessage = $_REQUEST['error'];
        $order->status       = Orders::STATUS_FAILED;
        $order->save();
      }
    }
  }
}